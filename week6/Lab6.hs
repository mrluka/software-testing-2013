module Lab6

where
import Data.List
import System.Random
import Week6

{- 
Task 1 
  Implement a function exM 
  that does modular exponentiation of x^y in polynomial time, 
  by repeatedly squaring modulo N.
  E.g., x^33 mod 5 can be computed by means of
  x^33 (mod 5) = x^32 (mod 5) * x (mod 5)
  x^32 (mod N) is computed in five steps by means of repeatedly squaring modulo N:
  x (mod N) -> x^2   (mod N) -> x^4  (mod N) ! -> ...-> ! x^32 (mod N):
  If this explanation is too concise, look up relevant literature
-}

exM :: Integer -> Integer -> Integer -> Integer
exM x y z = x

{- 
Task2 : 
  Check that your implementation is more efficient than expM by 
  running a number of relevant tests and documenting the results.
-}

{-
Task 3 :
  In order to test Fermat's Primality Check (as implemented in function primeF),
  the list of prime numbers generated by Eratosthenes' sieve is useless, for Fermat's
  Primality Check correctly classify the primes as primes. Where the check can go
  wrong is on classifying composite numbers; these can slip through the Fermat test.
  Write a function composites :: [Integer] that generates the infinite list of composite 
  natural numbers. Hint: modify Eratosthenes' sieve, so that instead of throwing away 
  composite numbers, it marks them as false. Next filter out the numbers marked as false.
-}

{-
Task 4 :
  Use the list of composite numbers to test Fermat's primality check. What is the
  least composite number that you can find that fools the check, for testF k with
  k = 1; 2; 3 ? What happens if you increase k?
-}

{-
Task 5 :
  Use the list generated by the following function for a further test of Fermat's primality check.
  Read the entry on Carmichael numbers on Wikipedia to explain what you find.
-}

carmichael :: [Integer]
carmichael = [ (6*k+1)*(12*k+1)*(18*k+1) | 
      k <- [2..], 
      isPrime (6*k+1), 
      isPrime (12*k+1), 
      isPrime (18*k+1) ]

{-
Task 6 : 
  Use the list from the previous exercise to test the Miller-Rabin primality check.
  What do you find?
-}

{-
Task 7 :
  You can use the Miller-Rabin primality check to discover some large Mersenne
  primes. The recipe: take a large prime p, and use the Miller-Rabin algorithm
  to check whether 2p  1 is also prime. Find information about Mersenne primes
  on internet and check whether the numbers that you found are genuine Mersenne
  primes. Report on your findings.
-}