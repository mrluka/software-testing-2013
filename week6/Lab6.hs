module Lab6

where
import Data.List
import System.Random
import Week6
import Techniques
import Text.Printf

{- 
Task 1  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 1 
  Implement a function exM that does modular exponentiation of x^y 
  in polynomial time, by repeatedly squaring modulo N.
  E.g., x^33 mod 5 can be computed by means of
  x^33 (mod 5) = x^32 (mod 5) * x (mod 5)
  x^32 (mod N) is computed in five steps by means of repeatedly squaring modulo N:
  x (mod N) -> x^2 (mod N) -> x^4  (mod N) -> ...-> x^32 (mod N):
  If this explanation is too concise, look up relevant literature
-}


-- SOLUTION (Source: http://rosettacode.org/wiki/Modular_exponentiation#Haskell)
exM' :: Integer -> Integer -> Integer -> Integer -> Integer
exM' b 0 m r = r
exM' b e m r | e `mod` 2 == 1 = exM' (b * b `mod` m) (e `div` 2) m (r * b `mod` m)
exM' b e m r = exM' (b * b `mod` m) (e `div` 2) m r

-- random tests to assure that our implementation comes up with the same result as the 'regular' mod operation

-- perform 10000 random tests
doRandomTests :: IO Bool
doRandomTests = doRandomTestsR 10000

-- perform a given number of random tests
doRandomTestsR :: Integer-> IO Bool
doRandomTestsR x = 
		      if x > 0 
		      then 
		      do r <- doRandomTest
		         p <- (doRandomTestsR (x - 1))
		         return (p && r)
		      else return True

-- perform a single random test
doRandomTest :: IO Bool
doRandomTest = do  
		   x <- (getRandomInt 1000)
		   y <- (getRandomInt 1000) 
		   z <- (getRandomInt 1000) 
		   if 
		    toInteger(exM (toInteger(x+1)) (toInteger(y+1)) (toInteger(z+1)))
		      == 
		    toInteger((exM' (toInteger(x+1)) (toInteger(y+1)) (toInteger(z+1))) 1) 
		   then return True
		   else error ("exM' gives not the same result as exM for "	 ++ (show (x+1)) ++ " , "  ++ (show (y+1)) ++ " ," ++ (show (z+1)))

{- 
Task 2  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 2 
  Check that your implementation is more efficient than expM by 
  running a number of relevant tests and documenting the results.
-}

{-


Proposed Answer:
We found that the solution to this task was already included in the file Week6.hs. 
So we tried to find a solution that is not only faster than expM, but also
faster than exM.

The result is exM', which is slightly faster than exM when fed with large numbers.
The downside of this implementation is that it consumes more memory. 
(See definition of really_long_number at the end of this file)

Test Details:

Lab6.exM' is much faster and more memory efficient than expM

*Lab6> expM 5 50000000 3 = 1	(2.28 secs, 274180136 bytes)
*Lab6> exM 5 50000000 3 = 1	(0.00 secs, 513760 bytes)
*Lab6> exM' 5 50000000 3 1 = 1	(0.00 secs, 552536 bytes)

Lab6.exM' is slightly faster than Week6.exM for larger numbers but takes up more memory:

*Lab6> exM  1317 really_long_number 1713 = 	1143 (0.38 secs, 167553376 bytes)
*Lab6> exM' 1317 really_long_number 1713 1 =  	1143 (0.35 secs, 279190608 bytes)

To assure that our implementation exM' gives the same result as exM, we made use of automated testing
(see doRandomTests)

-}


{-
Task 3  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 3 
  In order to test Fermat's Primality Check (as implemented in function primeF),
  the list of prime numbers generated by Eratosthenes' sieve is useless, for Fermat's
  Primality Check correctly classify the primes as primes. Where the check can go
  wrong is on classifying composite numbers; these can slip through the Fermat test.
  Write a function composites :: [Integer] that generates the infinite list of composite 
  natural numbers. 
  Hint: modify Eratosthenes' sieve, so that instead of throwing away 
  composite numbers, it marks them as false. Next filter out the numbers marked as false.

Notes (Task 3 & Task 4)
  Test Fermat’s Primality Check (primeF) 
  Eratosthenes’ sieve is useless, it calculates primes as integers above 1 that are not multiples of primes
  Modify Eratosthenes sieve so that it marks compound integers as false 
  Fermat's Primality Check can go wrong 
  Where the check can go wrong is on classifying composite numbers; these can slip through the Fermat test.
  composites :: [Integer] should generate only nubers that are composite: integer above 1 that are (!) multiple of primes
  Find integer produced by composites :: [Integer] that fails the primeF test

-}
-- Source: http://www.haskell.org/haskellwiki/Prime_numbers
-- genuine yet wasteful sieve of Eratosthenes
-- primesTo m = eratos [2..m]  where
--    eratos []     = []
--    eratos (p:xs) = p : eratos (xs `minus` [p, p+p..m])
-- eratos (p:xs) = p : eratos (xs `minus` map (p*) [1..m])
-- eulers (p:xs) = p : eulers (xs `minus` map (p*) (p:xs))  
-- turner (p:xs) = p : turner [x | x <- xs, rem x p /= 0]
-- primes' = 2 : 3 : ([5,7..] `minus` unionAll [[p*p, p*p+2*p..] | p <- tail primes'])

-- minus (x:xs) (y:ys) = case (compare x y) of 
--             LT -> x : minus  xs  (y:ys)
--             EQ ->     minus  xs     ys 
--             GT ->     minus (x:xs)  ys
-- minus  xs     _     = xs

-- unionAll = foldr (\(x:xs)->(x:).union xs) []


------ Source: http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#Multiples_of_primes

merge :: (Ord a) => [a] -> [a] -> [a] -- The merge function is a highly-specialized function that merges two infinite, sorted lists
merge xs@(x:xt) ys@(y:yt) = 
  case compare x y of
    LT -> x : (merge xt ys)
    EQ -> x : (merge xt yt)
    GT -> y : (merge xs yt)



diff :: (Ord a) => [a] -> [a] -> [a] -- diff, in short, removes all of the elements of the second list passed to it from the first.
diff xs@(x:xt) ys@(y:yt) = 
  case compare x y of
    LT -> x : (diff xt ys)
    EQ -> diff xt yt
    GT -> diff xs yt


composites :: [Integer] 
composites = foldr1 f $ map g $ tail primes 
  where 
    f (x:xt) ys = x : (merge xt ys)
    g p         = [ n * p | n <- [p, p + 2 ..]]


{-
 ----- Task 4 --------------- --------------- --------------- --------------- --------------- --------------- --------------- 4 
  Use the list of composite numbers (composites :: [Integer]) to test Fermat's primality check. 

a) What is the least composite number that you can find that fools the check, for testF k with  k = 1; 2; 3?

The following test results show the results where the function pr
Test setting: k = 1
comp_pr_test 100000 
9 tries to fool us! 
27 tries to fool us! 
45 tries to fool us! 
217 tries to fool us! 
259 tries to fool us! 
561 tries to fool us! 
703 tries to fool us! 
1105 tries to fool us!
1729 tries to fool us!
2821 tries to fool us! 
----

Test setting: k = 2
comp_pr_test 100000 
9 tries to fool us! 
65 tries to fool us! 
153 tries to fool us! 
165 tries to fool us!
217 tries to fool us! 
301 tries to fool us! 
341 tries to fool us! 
425 tries to fool us! 
561 tries to fool us! 
703 tries to fool us! 
1105 tries to fool us! 
1387 tries to fool us! 
1729 tries to fool us!
----

Test setting: k = 3
comp_pr_test 100000 
91 tries to fool us! 
561 tries to fool us! (often)
703 tries to fool us! (often)
1105 tries to fool us! (often)
1729 tries to fool us! (often)
1891 tries to fool us! (often)
2821 tries to fool us! (quite often)
6601 tries to fool us! (quite often)
----

Test setting: k = 4
comp_pr_test 100000 
561 tries to fool us! (often)
703 tries to fool us! (often)
1105 tries to fool us! (often)
1729 tries to fool us! (often)
2465 tries to fool us! (often)
8911 tries to fool us! (often)
2465 tries to fool us! (often)



b) What happens if you increase k?
  By increasing K, the test results, compared to each other, in average show higher numbers. 
  Interesting is that each setting for K has different results but that some of the numbers were found with each test setting: 561, 1105, 1729. 
The best way would maybe be to run primeF multiple times with k-1 and use the union of all sets produced by each step. By doing this, the chances for a wrongly identified prime decreases,..(we think)

--
Source: http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#Multiples_of_primes
There is more than two orders of magnitude difference between the naive implementation's performance and the improved implementation's when picking only the ten thousandth prime! Further, this disparity increases the farther into the list of prime numbers you delve. What's going on?
--

Source: Course slides page 21
If N is indeed prime then a^(N−1) ≡ 1 (mod N), and the test works fine.
But if N is composite, it may still happen that a^(N−1) ≡ 1 (mod N), for Fermat’s Little Theorem does not specify what happens for composite numbers . . .


-}
comp_pr_test :: Int -> IO Bool
comp_pr_test n = comp_pr_testR n composites

comp_pr_testR :: Int -> [Integer] -> IO (Bool)
comp_pr_testR 0 _ =  return True
comp_pr_testR n (x:xs) = do
                                   isPr <- primeF 2 x -- True->primeF is wrong, x is the composite of n primes, that implies it must not be a prime as itself
                                   if(isPr)
                                     then do (printf "\n %d tries to fool us! \n" x)
                                             return False
                                     else do --(printf "%d " x) -- TEST- OUTPUT can be enabled to show all checked integers, low performance ! 
                                             comp_pr_testR (n-1) xs


-- b) TESTS with static number to check, for: What happens if you increase k? 
prime1Test :: Int ->  IO Bool 
prime1Test n = primeXTest n 1

prime2Test :: Int ->  IO Bool 
prime2Test n = primeXTest n 2

prime3Test :: Int ->  IO Bool 
prime3Test n = primeXTest n 3

prime10Test :: Int ->  IO Bool 
prime10Test n = primeXTest n 4

primeXTest :: Int -> Int -> IO Bool
primeXTest 0 _= return False
primeXTest n x= do res <- primeF x 63 -- CAUTION! static integer to check whether is prime or not. 
                   if (res)
                     then return True
                     else primeXTest (n-1) x


{-
Task 5  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 5
  Use the list generated by the following function for a further test of Fermat's primality check.
a)Read the entry on Carmichael numbers on Wikipedia to explain what you find.

WIKI: http://en.wikipedia.org/wiki/Carmichael_number

The tests showed that running carmi_pr_test, but with different k values for primeF, that by increasing k, the wrongl identified numbers increase, too. This is a commonality to Task 4 where the results als increase by increasing k. 

Because of the characteristics of the Carmichael numbers, the Fermat's check can go wrong with every Carmichael number! Each number produced by the function carmichael is potentially dangerous and therefore, to increase the chance to get the right answer, the check should be repeated multiple times with the use of different values for k (as already mentioned in Task 4).

-}

carmichael :: [Integer]
carmichael = [ (6*k+1)*(12*k+1)*(18*k+1) | 
      k <- [2..], 
      isPrime (6*k+1), 
      isPrime (12*k+1), 
      isPrime (18*k+1) ]


carmi_pr_test :: Int -> IO Bool
carmi_pr_test n = carmi_pr_testR n carmichael


carmi_pr_testR :: Int -> [Integer] -> IO Bool
carmi_pr_testR 0 _ =  return True
carmi_pr_testR n (x:xs) = do
                                   isPr <- primeF 2 x
                                   if(isPr)
                                     then do (printf "\n %d tries to fool us! \n" x)
                                             return False
                                     else do
                                             carmi_pr_testR (n-1) xs

{-
Task 6  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 6
  Use the list from the previous exercise to test the Miller-Rabin primality check.
a) What do you find?

WIKI: http://de.wikipedia.org/wiki/Miller-Rabin-Test#Zuverl.C3.A4ssigkeit

The Miller-Rabin test returns 172947529 as prime, but it is a Carmichael pseudo prime. To get results with a higher chance to be right, the test should be executed multiple times but with different (random) parameters. This was tested with the function checkMillerRabin. It showed that the results are more precise by repeating the test with different random values. (This was tested by modifying the functions parameters, not auto-test present yet).
-}



millerRabinTest :: Int -> IO Bool
millerRabinTest n = millerRabinTestR n carmichael


millerRabinTestR :: Int -> [Integer] -> IO Bool
millerRabinTestR 0 _ =  return True
millerRabinTestR n (x:xs) = do     
                              randomA <- getRandomInt 100
                              let isPr = millerRabinPrimality x 100  -- True->primeF is wrong, x is the composite of n primes, that implies it must not be a prime as itself
                              if(isPr)
                                then do (printf "\n %d tries to fool us! \n" x)
                                        return False
                              else do --(printf "%d " x) -- TEST- OUTPUT can be enabled to show all checked integers, low performance ! 
                                     millerRabinTestR (n-1) xs


-- n is the number to test; a is the (presumably randomly chosen) witness
-- Precondition of Miller-Rabin: n >= 3
millerRabinPrimality :: Integer -> Integer -> Bool
millerRabinPrimality n a
    | a <= 1 || a >= n-1 = 
        error $ "millerRabinPrimality: a out of range (" 
              ++ show a ++ " for "++ show n ++ ")" 
    | n < 2 = False
    | even n = False
    | b0 == 1 || b0 == n' = True
    | otherwise = iter (tail b)
    where
        n' = n-1
        (k,m) = find2km n'
        b0 = powMod n a m
        b = take (fromIntegral k) $ iterate (squareMod n) b0
        iter [] = False
        iter (x:xs)
            | x == 1 = False
            | x == n' = True
            | otherwise = iter xs


-- Runs checkMillerRabinPrimality X times and checks whether true or false was predominant. (Wiki page for Miller-Rabin ~: after 10 computations the chance to get the wrong result is 10^(-6).
checkMillerRabin :: Integer -> IO Bool 
checkMillerRabin p = do let allVals = (checkMillerRabinPrimality p 10)
                        let tVals  = length (filter (== True) allVals)
                        let fVals = length (filter (== False) allVals)
                      --  (printf "t: %d f: %d \n"  tVals fVals) -- TEST-OUTPUT:True & False count of results from computation for p
                        if((tVals > fVals))
                            then return True
                            else return False


checkMillerRabinPrimality :: Integer -> Integer -> [Bool]
checkMillerRabinPrimality _ 1 = [] 
checkMillerRabinPrimality n a =  (millerRabinPrimality n a) : (checkMillerRabinPrimality n (a-1))


-- (eq. to) find2km (2^k * n) = (k,n)
find2km :: Integral a => a -> (a,a)
find2km n = f 0 n
    where 
        f k m
            | r == 1 = (k,m)
            | otherwise = f (k+1) q
            where (q,r) = quotRem m 2       


-- (eq. to) pow' (*) (^2) n k = n^k
pow' :: (Num a, Integral b) => (a->a->a) -> (a->a) -> a -> b -> a
pow' _ _ _ 0 = 1
pow' mul sq x' n' = f x' n' 1
    where 
        f x n y
            | n == 1 = x `mul` y
            | r == 0 = f x2 q y
            | otherwise = f x2 q (x `mul` y)
            where
                (q,r) = quotRem n 2
                x2 = sq x
 
mulMod :: Integral a => a -> a -> a -> a
mulMod a b c = (b * c) `mod` a
squareMod :: Integral a => a -> a -> a
squareMod a b = (b * b) `rem` a
 
-- (eq. to) powMod m n k = n^k `mod` m
powMod :: Integral a => a -> a -> a -> a
powMod m = pow' (mulMod m) (squareMod m)

{-
Task 7  --------------- --------------- --------------- --------------- --------------- --------------- --------------- 7
  You can use the Miller-Rabin primality check to discover some large Mersenne
  primes. The recipe: take a large prime p, and use the Miller-Rabin algorithm
  to check whether 2^p - 1 is also prime. Find information about Mersenne primes
  on internet and check whether the numbers that you found are genuine Mersenne
  primes. Report on your findings.

Following solution does not show 3 as Mersenne Prime because the millerRabinPrimality function implementation's preconditions 
does not accept 3 as number-to-check. To get a result from the millerRabin check, a must be greater than 1 (so at least number 2) 
and smaller than n-1:  a <= 1 || a >= n-1.
N is the number to check whether or not it is a Prime. a is a arbitrarily (random) number. 
3 is a Mersenne Prime, but it can not be evaluated by the mersennePrime function because it would not pass the precondition mentioned above.
If n=3, then there is no possible way to pass the precondition.


Test results:
findMersennePrime
 Mersenne Prime found! ->  31 with base: 5 
 Mersenne Prime found! ->  127 with base: 7 
 Mersenne Prime found! ->  8191 with base: 13 
 Mersenne Prime found! ->  131071 with base: 17 
 Mersenne Prime found! ->  524287 with base: 19 
 Mersenne Prime found! ->  2147483647 with base: 31 
True
(0.02 secs, 5736016 bytes)

-->> At the end of this file is a complete listing of all found Mersenne Primes TODO

-}


findMersennePrimes :: IO Bool
findMersennePrimes = findMersennePrime (filter (>15) primes)

findMersennePrime :: [Integer] -> IO Bool
findMersennePrime [] =  error "Empty list in mersennePrimeR" -- should not happen :) or better: should not happen with infinite list
findMersennePrime (x:xs) = do     
                          basePrim <- checkMillerRabin x 
                          if(basePrim)
                             then do let mersInt =   toInteger((2^x) -1)
                                     if(mersInt < 0)
                                        then return True
                                        else do 
                                                isMersPri <- checkMillerRabin mersInt
                                                if(isMersPri)
                                                   then do (printf "\n Mersenne Prime found! ->  %d with base: %d \n" mersInt x)
                                                   else do (printf "") -- (printf " NOT %d base: %d \n" mersInt x) --findMersennePrime xs
                                                (findMersennePrime xs)     
                             else findMersennePrime xs





{-

Mersenne Prime found! ->  131071 with base: 17 

 Mersenne Prime found! ->  524287 with base: 19 

 Mersenne Prime found! ->  2147483647 with base: 31 

 Mersenne Prime found! ->  2305843009213693951 with base: 61 

 Mersenne Prime found! ->  618970019642690137449562111 with base: 89 

 Mersenne Prime found! ->  162259276829213363391578010288127 with base: 107 

 Mersenne Prime found! ->  170141183460469231731687303715884105727 with base: 127 

 Mersenne Prime found! ->  68647976601306097149819007990813932172694353001433054093944634591855431833976560521225596406614545549772963113
 91480858037121987999716643812574028291115057151 with base: 521 

 Mersenne Prime found! ->  53113799281676709868958820655246862732959311772703192319944413820040355986085224273916250226522928566888932948
 6246501015346579337652707239409519978766587351943831270835393219031728127 with base: 607 

 Mersenne Prime found! ->  10407932194664399081925240327364085538615262247266704805319112350403608059673360298012239441732324184842421613
 9542810077913835662483234649081399066056773207629241295093892203457731833496615835504729594205476898112116936771475484788669625013844382
 602917323488853111608285384165850282556046662248318909188018470682222031405210266984354887329580288780508697361869007147207105557031687
 29087 with base: 1279 

 Mersenne Prime found! ->  1475979915214180235084898622737381736312066145333169775147771216478570297878078949377407337049389289382748507
 531496480477281264838760259191814463365330269540496961201113430156902396093989090226259326935025281409614983499388222831448598601834318
 536230923772641390209490231836446899608210795482963763094236630945410832793769905399982457186322944729636418890623372171723742105636440
 368218459649632948538696905872650486914434637457507280441823676813517852099348660847172579408422316678097670224011990280170474894487426
 924742108823536808485072502240519452587542875349976558572670229633962575212637477897785501552646522609988869914013540483809865681250419
 497686697771007 with base: 2203 

 Mersenne Prime found! ->  4460875571837584295711517064021018098862086324128599011119912199634046857928204733691125452690039890261532459
 311243167023957587056936793647909034974611470710652541933539381249782263079473124107988748690400702793284288103117548441080948782524948
 667609695869981289826458775960289791715369625030684296173317021847503245830091718321049160501576288866063721455017022259251252240768296
 054271735739648129952505694124807207384768552936816667128448311908776206067866638621902401185707368319018864792258104147140789353865624
 979681787291276295949244119609613867139462798992750069549171397587960612238033935373810346664944029510520590479686932553886479304409251
 04186817009640171764133172418132836351 with base: 2281 

 Mersenne Prime found! ->  2591170860132026277762467679224415309418188875531254273039749231618740192665863620862012095168004834065506952
 417331941774416895092388070174103777095975120423130666240829163535179523111861548622656045476911275958487756105687579311910177114088262
 521538490358304011850721164247474618230314713983402292880745456779079410372882358207058923510684338829868886166586502809276920803396058
 693087905004095037098759021190183719916209940025689351131365488297391126567973032419865172501164127035097054277734779723498216764434466
 683831193225400996489940517902416240565190544836908096160616257430423617218633394158524264312087372665919620617535357488928945996291951
 830826218608534009379328394202618665861425032514507730962742353768229386494071277008460771242118230808041392980870575047138252645714483
 793711250320818261265666490842516994539518877896136502484057393785945994443352311882801236604062624686092121503499375847822922371443396
 28858485938215738821232393687046160677362909315071 with base: 3217 

 Mersenne Prime found! ->  1907970075244390738074680429695291736693569947499401773947418826735289797870050537063680498355149002443034959
 549507097257621863112241488288119202169045422069607446661693642211952895384368453902501686639328388051920551371543909126665275330073092
 926875390922570433625178573666246999754023754629544902932592333031373306435315565397399219262014386064390200751747230290568382725050515
 719675946083500634044959776606562690208239608255670123441899089279566460119980579885486301076373809935198265823897818881357054086530452
 196558017580812511640805546090574680282033087187246540810553232158601896113912960304711084431467456719677663089258585472715073115637651
 710083182486471100976148903135628565417841548817431460339096027379473850553559603318556145409000814563786590683703172676969800011877509
 954910903501084170509179915621679722810701613059725180448720483313063837150948549384157385498946060707225847379781766864221343545269894
 430283536440371873753853978382595118331664161343236956603676768977222879187734209689823260890261500315154241654621113375274311548906663
 273749214462768335645197767976338755035486650939145564820314822488831270237770396677079765598573333570137273420790990644004557418306543
 20379350833236245819348824064783585692924881021978332974949906122664421376034687815350484991 with base: 4253 

 Mersenne Prime found! ->  2855425422282796139015635661021640083261642386447028891992474566022844003906006538759545715055398432397545139
 158961502978783993770560714351697472211079887911982009884775313392142827720160590099045866862549890848157354224804090223442975883525260
 043838906326161240763173874168811485924861883618739041757831456960169195743907655982801885990355784485910776836771755204340742877265780
 062667596159707595213278285556627816783856915818444364448125115624281367424904593632128101802760960881114010033775703635457251209240736
 469215767971461993876192965603026802617901181329250123230464444386223088779246093737730124816816724244936744744885377701557830068808526

8215428712777456064478585641592133284435802064227146949130917627164470416896780700967735904298089096167504529272580008435003448316282970899027286499819943876472345742762637296948483047509171741861811306885187927486226122933413689280566343844666463265724761672756608391056505289757138993202111214957953114279462545533053870678210676017687509778661004600146021384084480212250536890547937420030957220967329547507217181155318713102310579026
 875009029688319359130952698213111413223933564901784887289822881562826008138312961436638459454311440437538215428712777456064478585641592
 133284435802064227146949130917627164470416896780700967735904298089096167504529272580008435003448316282970899027286499819943876472345742
 762637296948483047509171741861811306885187927486226122933413689280566343844666463265724761672756608391056505289757138993202111214957953
 114279462545533053870678210676017687509778661004600146021384084480212250536890547937420030957220967329547507217181155318713102310579026
 08580607 with base: 4423 
-}

really_long_number = 